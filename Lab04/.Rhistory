}
print(equation)
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
help(setwd)
setwd(dir = rekna/Documents/Comp\Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(rekna/Documents/Comp\Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(rekna/Documents/Comp Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(rekna/Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(Users/rekna/Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
getwd
getwd
getwd()
setwd(/Users/rekna/Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(/Users/rekna/Documents/Comp Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
getwd()
setwd(~/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(~/Usersrekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(~/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
read.csv(file = "CO2_data_cut_paste.csv")
getwd()
setwd(/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04)
getwd()
setwd(~/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04)
setwd("~/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
getwd()
read.csv(file = "CO2_data_cut_paste.csv")
matrix <- read.csv(file = "CO2_data_cut_paste.csv")
matrix
ncol(matrix)
nCol <- ncol(matrix)
nRow <- nRow(matrix)
nRow <- nRow(matrix)
nRow <- nrow(matrix)
for ( c in 1:nCol) {
for ( m in 1:nRow) {
percentage <- matrix[i]/matrix[i-1]
}
}
for ( c in 1:nCol) {
for ( m in 1:nRow) {
matrix[ m, c ] <- [ m ]/[ m - 1 ]
}
}
for ( c in 1:nCol) {
for ( m in 1:nRow) {
matrix[ m, c ] <- matrix[ m ] / matrix[ m - 1 ]
}
}
for ( c in 1:nCol) {
for ( m in 2:nRow) {
matrix[ m, c ] <- matrix[ m ] / matrix[ m - 1 ]
}
}
for ( c in 2:nCol) {
for ( m in 2:nRow) {
matrix[ m, c ] <- matrix[ m ] / matrix[ m - 1 ]
}
}
for ( c in 1:nCol) {
for ( m in 1:nRow) {
matrix[ m, c ] <- matrix[ m ] / matrix[ m - 1 ]
}
}
^L
for ( c in 1:nCol) {
for ( m in 1:nRow) {
matrix[ m, c ] <- matrix[ m ] / matrix[ m - 1 ]
}
}
matrix[ m, c ] <- matrix[ m ]/matrix[ m - 1 ]
View(matrix)
View(matrix)
matrix
read.csv(file = "CO2_data_cut_paste.csv")
matrix <- read.csv(file = "CO2_data_cut_paste.csv")
matrix
nCol <- ncol(matrix)
nRow <- nrow(matrix)
for ( c in 1:nCol) {
for ( m in 1:nRow) {
matrix[ m, c ] <- matrix[ m ]/matrix[ m - 1 ]
}
}
matrix
for ( c in 1:nCol) {
for ( m in 1:nRow) {
matrix[ m, c ] <- matrix[m]+1
}
}
matrix <- read.csv(file = "CO2_data_cut_paste.csv")
nCol <- ncol(matrix)
nRow <- nrow(matrix)
matrix
matrix[ m, c ] <- +1
for ( c in 1:nCol) {
for ( m in 1:nRow) {
matrix[ m, c ] <- +1
}
print(matrix)
for ( c in 1:nCol) {
for ( m in 1:nRow) {
matrix[ m, c ] <- (matrix[m]/matrix[m-1])
}
}
for ( m in 2:nRow) {
matrix[ m, c ] <- (matrix[m]/matrix[m-1])
}
for ( c in 1:nCol) {
for ( m in 2:nRow) {
matrix[ m, c ] <- (matrix[m]/matrix[m-1])
}
}
for ( c in 1:nCol) {
for ( m in 2:nRow) {
matrix[ m, c ] <- (matrix[m]/matrix[m-1])
}
}
for ( c in 2:nCol ) {
for ( m in 2:nRow ) {
matrix[ m, c ] <- (matrix[m]/matrix[m-1])
}
}
for ( c in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, c ] <- (matrix[m]/matrix[m-1])
}
}
print(matrix)
read.csv(file = "CO2_data_cut_paste.csv")
matrix <- read.csv(file = "CO2_data_cut_paste.csv")
nCol <- ncol(matrix)
nRow <- nrow(matrix)
#lab step 4b
for ( c in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, c ] <- (matrix[m]/matrix[m-1])
}
}
read.csv(file = "CO2_data_cut_paste.csv")
matrix <- read.csv(file = "CO2_data_cut_paste.csv")
nCol <- ncol(matrix)
nRow <- nrow(matrix)
print(matrix)
matrix[ m, c ] <- (matrix[c]/matrix[c-1])
for ( c in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, c ] <- (matrix[c]/matrix[c-1])
}
}
print(matrix)
for ( q in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, q ] <- (matrix[m]/matrix[m-1])
}
}
for ( q in 1:nCol ) {
for ( m in 2:nRow ) {
matrix[ m, q ] <- (matrix[m]/matrix[m-1])
}
}
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
matrix[ m, q ] <- (matrix[m]/matrix[m-1])
}
}
for ( q in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, q ] <- (matrix[m]/matrix[m-1])
}
}
for ( q in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, q ] <- (matrix[m]/matrix[[m-1]])
}
}
for ( q in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, q ] <- (matrix[[m]]/matrix[[m-1]])
}
}
for ( q in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[[ m, q ]] <- (matrix[[m]]/matrix[[m-1]])
}
}
matrix <- read.csv(file = "CO2_data_cut_paste.csv", header = TRUE)
nCol <- ncol(matrix)
nRow <- nrow(matrix)
for ( q in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, q ] <- (matrix[m]/matrix[m-1])
}
}
for ( m in 2:nRow ) {
matrix[ m, q ] <- (matrix[m]/matrix[m-1])
}
for ( q in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, q ] <- (matrix[m]/matrix[m-1])
}
}
#Lab part 1
#Lab step 1, printing hi ten times
for ( i in 1:10) {
print("hi")
}
#lab step 2
allowance <- 5
gum <- (2*1.34)
piggybank <- 10
for ( j in seq(1,8)) {
moneytotal <- (piggybank + allowance - gum)
print(moneytotal)
piggybank <- moneytotal
}
#lab step 3
initialpopulation <- 2000
rateofdecline <- .95
for ( y in seq(1,7)) {
populationdecline <- initialpopulation*rateofdecline
print(populationdecline)
initialpopulation <- populationdecline
}
#lab step 4
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
#LAB PART 2
#Lab step 1a
rep(0, 18)
#lab step 1b
for ( l in seq(1,18) ) {
addingthrees <- rep(3 * (1:18))
}
print(addingthrees)
#or
addingthreesagain <- rep(1,18)
for ( l in seq(1,18) ) {
addingthreesagain[l] <- (3 * l)
}
print(addingthreesagain)
#lab step 1c
makeitone <- rep(0,18)
makeitone[1] <- 1
print(makeitone)
#lab step 1d
for ( p in seq(2,18)) {
makeitone[p] <- (1 + (2 * makeitone[p-1]) )
}
print(makeitone)
#lab step 2
Fibonacci <- rep(1,20)
for ( f in seq(3,20)) {
Fibonacci[f] <- (Fibonacci[f-1] + Fibonacci[f-2])
}
print(Fibonacci)
#lab step 3
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
#making the plot
time <- seq(1,12)
abundance <- equation
plot(time, abundance, main = "Lab 04 Plot", xlab = "Time", ylab = "Abundance")
#lab step 4a
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
matrix <- read.csv(file = "CO2_data_cut_paste.csv")
nCol <- ncol(matrix)
nRow <- nrow(matrix)
#lab step 4b
for ( q in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, q ] <- (matrix[m]/matrix[m-1])
}
}
for ( q in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, q ] <- (matrix[m]/matrix[m-1])
}
}
for ( q in 1:nCol ) {
for ( m in 1:nRow ) {
matrix[ m, q ] <- (matrix[m,q]/matrix[m-1,q])
}
}
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
matrix[ m, q ] <- (matrix[m,q]/matrix[m-1,q])
}
}
matrix
View(matrix)
write.csv(x = matrix, file = "YearlyPercentChangesInCO2.csv")
if ( x > 5) {
print("Is pretty big, yo.")
}
x <- 7
if ( x > 5) {
print("Is pretty big, yo.")
}
read.csv("Vector1.csv")
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab05")
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab05")
getwd()
setwd("~")
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab05")
getwd()
read.csv("Vector1.csv")
is.na(Vector1)
Vector1 <- read.csv("Vector1.csv")     #assigning the imported vector to a variable
is.na(Vector1)
Zero <- 0
for ( i in 1:length(Vector1)) {
is.na(Vector1) <- Zero
}
str(Vector1)
Zero <- 0
for ( i in 1:length(Vector1)) {
if ( is.na(Vector1) == 0 ) {
TRUE <- Zero
}
}
Vector1 <- read.csv("Vector1.csv")     #assigning the imported vector to a variable
#2a, using a for loop to replace zeroes
Zero <- 0
Vector1 <- as.vector(Vector1$X)
for ( i in 1:length(Vector1)) {
if ( is.na(Vector1) == 0 ) {
TRUE <- Zero
}
}
Zero <- 0
Vector1 <- as.vector(Vector1$X)
for ( i in 1:length(Vector1)) {
if ( is.na(Vector1[i$X]) == 0 ) {
TRUE <- Zero
}
}
for ( i in 1:length(Vector1)) {
if ( is.na(Vector1[i]) == 0 ) {
TRUE <- Zero
}
}
Vector1 <- as.vector(Vector1$X)
for ( i in 1:length(Vector1)) {
if ( is.na(Vector1[i$x]) == 0 ) {
TRUE <- Zero
}
}
if ( is.na(Vector1[i$X]) == 0 ) {
TRUE <- Zero
}
Vector1 <- as.vector(Vector1$X)
for ( i in seq(1:length(Vector1)) {
if ( is.na(Vector1[i$X] ) == 0 ) {
TRUE <- Zero
}
}
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator< - 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <-
is.na(Vector1)
Zero <- 0
Vector1 <- as.vector(Vector1$X)
for ( i in seq(1:length(Vector1)) {
if ( is.na(Vector1[i$X] ) == 0 ) {
TRUE <- Zero
}
}
is.na(Vector1)
Vector1 <- read.csv("Vector1.csv")     #assigning the imported vector to a variable
Zero <- 0
Vector1 <- as.vector(Vector1$X)
for ( i in seq(1:length(Vector1)) {
if ( is.na(Vector1[i$X] ) == 0 ) {
TRUE <- Zero
}
}
is.na(Vector1)
"totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator< - 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- "
read.csv("Vector1.csv")     #Impoting the vector
Vector1 <- read.csv("Vector1.csv")     #assigning the imported vector to a variable
Zero <- 0
Vector1 <- as.vector(Vector1$x)
for ( i in seq(1:length(Vector1)) {
if ( is.na(Vector1[i] )) {
Vector1[i] <- Zero
}
}
is.na(Vector1)
"totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator< - 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- "
is.na(Vector1)
read.csv("Vector1.csv")     #Impoting the vector
Vector1 <- read.csv("Vector1.csv")     #assigning the imported vector to a variable
Vector1 <- as.vector(Vector1$x)     #Making the data set a readable vector
NAvalues <- which( is.na(Vector1) )     #Identifying all na's within the dataset using $which
Vector1[NAvalues] <- Zero     #setting all identified values to zero
Vector1 <- as.vector(Vector1$x)     #Making the data set a readable vector
for ( i in seq(1:length(Vector1)) {
if ( is.na(Vector1[i] )) {
Vector1[i] <- Zero    #replacing the ith element of the vector
}
}
#2b, using a which conditional to replace na's with zeroes
NAvalues <- which( is.na(Vector1) )     #Identifying all na's within the dataset using $which
Vector1[NAvalues] <- Zero     #setting all identified values to zero
"totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator< - 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- "
NAvalues <- which( is.na(Vector1) )     #Identifying all na's within the dataset using $which
Vector1[NAvalues] <- Zero     #setting all identified values to zero
for ( i in seq(1:length(Vector1))) {
if ( is.na(Vector1[i] )) {
Vector1[i] <- Zero    #replacing the ith element of the vector
}
}
NAvalues <- which( is.na(Vector1) )      #Identifying all na's within the dataset using $which
Vector1[NAvalues] <- Zero     #setting all identified values to zero
lowerlimit <- 50    #setting boundry variables for the subset
upperlimit <- 100
SubsetIndices <- which( Vector1 > lowerlimit, Vector1 < upperlimit)     #setting boundry indices
Subset1 <- Vector1[SubsetIndices]
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv("CO2_data_cut_paste.csv")
CO2data <- read.csv("CO2_data_cut_paste.csv")
initialprey <- 100      #initial prey abundance
Subset1
lowerlimit <- 50    #setting boundry variables for the subset
upperlimit <- 100
SubsetIndices <- which( Vector1 > lowerlimit, Vector1 < upperlimit)     #setting boundry indices
Subset1 <- Vector1[SubsetIndices]     #creating the subset
Subset1
SubsetIndices <- which( Vector1 > lowerlimit & Vector1 < upperlimit)     #setting boundry indices
Subset1 <- Vector1[SubsetIndices]     #creating the subset
subset
Subset1
View(CO2data)
CO2data <- header = TRUE
