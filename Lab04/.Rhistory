NewAdjacencyMatrix <- matrix( data = zero, ncol = numrowcol, nrow = numrowcol)
for(i in seq(1,length(PairMatrix))) {
NewAdjacencyMatrix[PairMatrix[i,1], PairMatrix[i,2]] <- 1
}
return(PairMatrix)
}
TransformMatrixAdjacency( PairMatrix = PairwiseMatrix )
PairwiseMatrix <- TransformMatrixPairwise( SqMatrix = AdjacencyMatrix )
TransformMatrixAdjacency( PairMatrix = PairwiseMatrix )
View(PairwiseMatrix)
TransformMatrixAdjacency <- function( PairMatrix ) {
numrowcol <- which.max(PairMatrix)
NewAdjacencyMatrix <- matrix( data = zero, ncol = numrowcol, nrow = numrowcol)
for(i in seq(2,length(PairMatrix))) {
NewAdjacencyMatrix[PairMatrix[i,1], PairMatrix[i,2]] <- 1
}
return(PairMatrix)
}
TransformMatrixAdjacency( PairMatrix = PairwiseMatrix )
TransformMatrixAdjacency <- function( PairMatrix ) {
numrowcol <- which.max(PairMatrix)
NewAdjacencyMatrix <- matrix( data = zero, ncol = numrowcol, nrow = numrowcol)
length(PairMatrix)
return(PairMatrix)
for(i in seq(2,length(PairMatrix))) {
NewAdjacencyMatrix[PairMatrix[i,1], PairMatrix[i,2]] <- 1
}
}
TransformMatrixAdjacency( PairMatrix = PairwiseMatrix )
length(PairwiseMatrix)
View(PairwiseMatrix)
length(PairwiseMatrix[,1])
TransformMatrixAdjacency <- function( PairMatrix ) {
numrowcol <- which.max(PairMatrix)
NewAdjacencyMatrix <- matrix( data = zero, ncol = numrowcol, nrow = numrowcol)
for(i in seq(1,length(PairMatrix[,1]))) {
NewAdjacencyMatrix[PairMatrix[i,1], PairMatrix[i,2]] <- 1
}
}
TransformMatrixAdjacency( PairMatrix = PairwiseMatrix )
Q <- TransformMatrixAdjacency( PairMatrix = PairwiseMatrix )
TransformMatrixAdjacency <- function( PairMatrix ) {
numrowcol <- which.max(PairMatrix)
NewAdjacencyMatrix <- matrix( data = zero, ncol = numrowcol, nrow = numrowcol)
for(i in seq(1,length(PairMatrix[,1]))) {
NewAdjacencyMatrix[PairMatrix[i,1], PairMatrix[i,2]] <- 1
}
return(NewAdjacencyMatrix)
}
TransformMatrixAdjacency( PairMatrix = PairwiseMatrix )
Q <- TransformMatrixAdjacency( PairMatrix = PairwiseMatrix )
sum(Q != 0)
View(Q)
?return
plot(n, main = "Discrete-time Logistic Growth", xlab = "Generations", ylab = "Abundance")
FibReturn <- function( n = 3 ) {
if( n < 0)
return( "bro dats a negative.")     #Bonus 2, returning a message if negative values
#are inputted
Fibonacci <- rep( 1 , n )
if( n < 3) {      #Bonus 1, this if statement is for returning numbers if n is below 3
for( d in 0:n)
Fibonacci[d] <- 1
return(Fibonacci)
}
for ( f in seq( 3 , length(Fibonacci)) ) {        #defining the function
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn(-1)     #testing all code parameters
FibReturn(2)
FibReturn(10)
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )    #defining the function, variables of which
#have been defined in function arguments
}
plot(n, main = "Discrete-time Logistic Growth", xlab = "Generations", ylab = "Abundance")
#plotting the function with appropriate
#axis labels
return(n)
}
LogGrowthFunction(Gens = 200)
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab07")
AdjacencyMatrix <- read.csv("LargeAdjacencyMatrix.csv")      #setting up a test matrix
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)         #defining all necesary variables and eliminating 'magic' numbers
nCols <- ncol(SqMatrix)
value <- 1
zero <- 0
m <- 0
PairwiseCols <- 3
CurrentPairwise <- 1
for (q in 1:nRows) {
for (f in 1:nCols) {
if (SqMatrix[q,f] != zero) {
m <- ( m + 1 )
} #creating a for loop to run through original matrix and find all
#nonzero elements in order to define the parameters of the new
#matrix (number of nonzero elements in first matrix = number of
#rows in pairwise matrix)
}
}
PairwiseMatrix <- matrix( ncol = PairwiseCols, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise , 1 ] <- j    #inputting row values into new matrix
PairwiseMatrix[ CurrentPairwise , 2 ] <- i    #inputting collumn values into new matrix
PairwiseMatrix[ CurrentPairwise , 3 ] <- value    #creating third collumn
CurrentPairwise <- ( CurrentPairwise + 1 )    #moving the inputs down the rows so as to
#avoid repeatedly overwriting the data
#in the first row
}
}
}
colnames(PairwiseMatrix) <- c("Row", "Column", "Value")
return(PairwiseMatrix)
}
FibReturn <- function( n = 3 ) {
if( n < 0)
return( "bro dats a negative.")     #Bonus 2, returning a message if negative values
#are inputted
Fibonacci <- rep( 1 , n )
if( n < 3) {      #Bonus 1, this if statement is for returning numbers if n is below 3
for( d in 0:n)
Fibonacci[d] <- 1
return(Fibonacci)
}
for ( f in seq( 3 , length(Fibonacci)) ) {        #defining the function
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn(-1)     #testing all code parameters
FibReturn(2)
FibReturn(10)
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )    #defining the function, variables of which
#have been defined in function arguments
}
plot(n, main = "Discrete-time Logistic Growth", xlab = "Generations", ylab = "Abundance")
#plotting the function with appropriate
#axis labels
return(n)
}
LogGrowthFunction(Gens = 200)
plot(n, main = "Discrete-time Logistic Growth", xlab = "Generations", ylab = "Abundance")
FibReturn <- function( n = 3 ) {
if( n < 0)
return( "bro dats a negative.")     #Bonus 2, returning a message if negative values
#are inputted
Fibonacci <- rep( 1 , n )
if( n < 3) {      #Bonus 1, this if statement is for returning numbers if n is below 3
for( d in 0:n)
Fibonacci[d] <- 1
return(Fibonacci)
}
for ( f in seq( 3 , length(Fibonacci)) ) {        #defining the function
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn(-1)     #testing all code parameters
FibReturn(2)
FibReturn(10)
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )    #defining the function, variables of which
#have been defined in function arguments
}
plot(n, main = "Discrete-time Logistic Growth", xlab = "Generations", ylab = "Abundance")
#plotting the function with appropriate
#axis labels
return(n)
}
LogGrowthFunction(Gens = 200)
getwd()
file <- read.csv(file.choose())
for ( p in seq(2,18)) {
makeitone[p] <- (1 + (2 * makeitone[p-1]) )
}
print(makeitone)
makeitone <- rep(0,18)    #creating a vector of 0s
for ( p in seq(2,18)) {
makeitone[p] <- (1 + (2 * makeitone[p-1]) )
}
print(makeitone)
write.csv(x = percentschangevalues, file = "YearlyPercentChangesInCO2.csv")
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
nCol <- ncol(lab4matrix)
nRow <- nrow(lab4matrix)
percentschangevalues <- lab4matrix
#lab step 4b, calculating percent change in the matrix
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m, q ] <- ( lab4matrix[ m , q ] / lab4matrix[ m - 1 , q ] )
}
}
print(percentschangevalues)
#lab step 4c, writing the csv
write.csv(x = percentschangevalues, file = "YearlyPercentChangesInCO2.csv")
print(percentschangevalues)
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m, q ] <- ( lab4matrix[ m , q ] / lab4matrix[ m - 1 , q ] )
}
}
percentschangevalues <- lab4matrix
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m, q ] <- ( lab4matrix[ m , q ] / lab4matrix[ m - 1 , q ] )
}
}
percentchangevalues <- lab4matrix
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m, q ] <- ( lab4matrix[ m , q ] / lab4matrix[ m - 1 , q ] )
}
}
print(percentschangevalues)
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
nCol <- ncol(lab4matrix)
nRow <- nrow(lab4matrix)
percentchangevalues <- lab4matrix
#lab step 4b, calculating percent change in the matrix
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m, q ] <- ( lab4matrix[ m , q ] / lab4matrix[ m - 1 , q ] )
}
}
print(percentschangevalues)
k <- 10000    #carrying capacity of the population
r <- 0.8    #population rate of increase
n <- 2500     #original population size
gens <- 12
for ( t in seq( 2, gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * ( k - n[t-1]) / k )
}
print(n)      #printing vector of population sizes at postition [t]
#making the plot
time <- seq(1,12)
abundance <- n
plot(time, abundance, main = "Lab 04 Plot", xlab = "Time", ylab = "Abundance")
View(lab4matrix)
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
read.csv(file = "CO2_data_cut_paste.csv")
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
nCol <- ncol(lab4matrix)    #defining the parameters of the matrix into variables
nRow <- nrow(lab4matrix)
percentchangevalues <- lab4matrix
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m, q ] <- ( lab4matrix[ m , q ] / lab4matrix[ m - 1 , q ] )
}
}
print(percentschangevalues)
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m, q ] <- ( percentchangevalues[ m , q ] / percentchangevalues[ m - 1 , q ] )
}
}
print(percentschangevalues)
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
( percentchangevalues[ m , q ] / percentchangevalues[ m - 1 , q ] ) <- percentchangevalues[ m, q ]
}
}
percentchangevalues[ m , q ] / percentchangevalues[ m - 1 , q ] <- percentchangevalues[ m, q ]
#Lab part 1
#Lab step 1, printing hi ten times
for ( i in 1:10) {    #creating a for loop to print the output 'hi' the desired number of times
print("hi")
}
#lab step 2, using calculations in a vector
allowance <- 5      #defining vairables, allowance as amount gained every iteration
gum <- (2*1.34)     #gum is how much spent each iteration. One 'stick' is valued at 1.34,
#and the problem calls for two purchases, thus 2 X 1.34.
piggybank <- 10     #starting quantity
for ( j in seq(1,8)) {    #running a for loop for 8 iterations of following equation
moneytotal <- (piggybank + allowance - gum)
print(moneytotal)
piggybank <- moneytotal
}
#lab step 3, creating a population change vector
initialpopulation <- 2000     #chosen initial population value for a population change problem
rateofdecline <- .95    #chosen rate of decline, also read as -.05
for ( y in seq(1,7)) {
populationdecline <- initialpopulation*rateofdecline    #equation for population change
print(populationdecline)
initialpopulation <- populationdecline
}
#lab step 4, creating a carrying capacity equation vector
k <- 10000    #carrying capacity of the population
r <- 0.8    #population rate of increase
n <- 2500     #original population size
gens <- 12
for ( t in seq( 2, gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * ( k - n[t-1]) / k )
}
print(n)      #printing vector of population sizes at postition [t]
#LAB PART 2
#Lab step 1a, creating a vector of 0s
rep(0, 18)
#lab step 1b, adding three to all integers in a vector
addingthrees <- rep(1,18)
for ( l in seq(1,18) ) {
addingthrees[l] <- (3 * l)    #adds three to each iteration
}
print(addingthrees)
#lab step 1c, altering a single point in a vector
makeitone <- rep(0,18)    #creating a vector of 0s
makeitone[1] <- 1     #defining iterated location for desired change
print(makeitone)
#lab step 1d, altering the string of numbers in a vector
for ( p in seq(2,18)) {     #using previously created vector we now modify each
#iteration using a for loop.
makeitone[p] <- (1 + (2 * makeitone[p-1]) )     #desired modification/equation to
#be added to vector
}
print(makeitone)
#lab step 2, creating a fibonacci sequence vector
Fibonacci <- rep(1,20)      #creting new vector
for ( f in seq(3,20)) {     #creating a for loop to apply the fibonacci equation to
#each iteration of the vector
Fibonacci[f] <- (Fibonacci[f-1] + Fibonacci[f-2])
}
print(Fibonacci)
#lab step 3, creting a plot of carrying capacity data
k <- 10000    #carrying capacity of the population
r <- 0.8    #population rate of increase
n <- 2500     #original population size
gens <- 12
for ( t in seq( 2, gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * ( k - n[t-1]) / k )
}
print(n)      #printing vector of population sizes at postition [t]
#making the plot
time <- seq(1,12)     #variable to define length of x axis
abundance <- n      #assigning a more appropriate name to the variable
plot(time, abundance, main = "Lab 04 Plot", xlab = "Time", ylab = "Abundance")
#line 82 defines the parameters for the plot
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
#lines 85-88 invove retrieving and storing a .csv file
nCol <- ncol(lab4matrix)    #defining the parameters of the matrix into variables
nRow <- nrow(lab4matrix)
percentchangevalues <- lab4matrix
#lab step 4b, calculating percent change in the matrix
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m, q ] <- ( percentchangevalues[ m , q ] / percentchangevalues[ m - 1 , q ] )
}
}
print(percentschangevalues)
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m , ] <- ( percentchangevalues[ m , ] / percentchangevalues[ m - 1 , ] )
}
}
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
#lines 85-88 invove retrieving and storing a .csv file
nCol <- ncol(lab4matrix)    #defining the parameters of the matrix into variables
nRow <- nrow(lab4matrix)
percentchangevalues <- lab4matrix
#lab step 4b, calculating percent change in the matrix
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m , ] <- ( percentchangevalues[ m , ] / percentchangevalues[ m - 1 , ] )
}
}
print(percentschangevalues)
print(percentchangevalues)
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m , ] / percentchangevalues[ m - 1 , ] )
}
}
print(percentchangevalues)
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m , q] / percentchangevalues[ m - 1 , q] )
}
}
print(percentchangevalues)
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
#lines 85-88 invove retrieving and storing a .csv file
nCol <- ncol(lab4matrix)    #defining the parameters of the matrix into variables
nRow <- nrow(lab4matrix)
percentchangevalues <- lab4matrix
#lab step 4b, calculating percent change in the matrix
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m , q] / percentchangevalues[ m - 1 , q] )
}
}
print(percentchangevalues)
for ( q in 2:nCol ) {
for ( m in 3:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m - 1 , q] / percentchangevalues[ m - 2 , q] )
}
}
print(percentchangevalues)
or ( q in 2:nCol ) {
for ( m in 3:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m , q] / percentchangevalues[ m - 1 , q] )
}
}
print(percentchangevalues)
for ( q in 2:nCol ) {
for ( m in 3:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m , q] / percentchangevalues[ m - 1 , q] )
}
}
print(percentchangevalues)
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
#lines 85-88 invove retrieving and storing a .csv file
nCol <- ncol(lab4matrix)    #defining the parameters of the matrix into variables
nRow <- nrow(lab4matrix)
percentchangevalues <- lab4matrix
#lab step 4b, calculating percent change in the matrix
for ( q in 2:nCol ) {
for ( m in 3:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m , q] / percentchangevalues[ m - 1 , q] )
}
}
print(percentchangevalues)
write.csv(x = percentchangevalues, file = "YearlyPercentChangesInCO2.csv")
for ( q in 2:nCol ) {     #using a for loop to divide every entry by its previous entry
for ( m in 3:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m -1 , q] / percentchangevalues[ m , q] )
}
}
print(percentchangevalues)
for ( q in 2:nCol ) {     #using a for loop to divide every entry by its previous entry
for ( m in 2:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m -1 , q] / percentchangevalues[ m , q] )
}
}
print(percentchangevalues)
for ( q in 2:nCol ) {     #using a for loop to divide every entry by its previous entry
for ( m in 2:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m , q] / percentchangevalues[ m -1 , q] )
}
}
print(percentchangevalues)
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
#lines 85-88 invove retrieving and storing a .csv file
nCol <- ncol(lab4matrix)    #defining the parameters of the matrix into variables
nRow <- nrow(lab4matrix)
percentchangevalues <- lab4matrix
#lab step 4b, calculating percent change in the matrix
for ( q in 2:nCol ) {     #using a for loop to divide every entry by its previous entry
for ( m in 2:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m , q] / percentchangevalues[ m -1 , q] )
}
}
print(percentchangevalues)
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
#lines 85-88 invove retrieving and storing a .csv file
nCol <- ncol(lab4matrix)    #defining the parameters of the matrix into variables
nRow <- nrow(lab4matrix)
percentchangevalues <- lab4matrix
#lab step 4b, calculating percent change in the matrix
for ( q in 2:nCol ) {     #using a for loop to divide every entry by its previous entry
for ( m in 2:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m -1 , q] / percentchangevalues[ m -1 , q] )
}
}
print(percentchangevalues)
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
lab4matrix <- read.csv(file = "CO2_data_cut_paste.csv")
#lines 85-88 invove retrieving and storing a .csv file
nCol <- ncol(lab4matrix)    #defining the parameters of the matrix into variables
nRow <- nrow(lab4matrix)
percentchangevalues <- lab4matrix
#lab step 4b, calculating percent change in the matrix
for ( q in 2:nCol ) {     #using a for loop to divide every entry by its previous entry
for ( m in 2:nRow ) {
percentchangevalues[ m , q] <- ( percentchangevalues[ m -1 , q] / percentchangevalues[ m , q] )
}
}
print(percentchangevalues)
write.csv(x = percentchangevalues, file = "YearlyPercentChangesInCO2.csv") #writing new data
