print(equation)
n <- equation
print(equation)
k <- 10000
r <- 0.8
n <- 2500
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(n)
print(equation)
k <- 10000
r <- 0.8
n <- 2500
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
help(setwd)
setwd(dir = rekna/Documents/Comp\Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(rekna/Documents/Comp\Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(rekna/Documents/Comp Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(rekna/Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(Users/rekna/Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
getwd
getwd
getwd()
setwd(/Users/rekna/Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(/Users/rekna/Documents/Comp Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
getwd()
setwd(~/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(~/Usersrekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(~/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
FibReturn <- function( n >= 3 ) {
Fibonacci <- rep( 1 , n )
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[]f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn <- function( n = 3 ) {
Fibonacci <- rep( 1 , n )
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn()
FibReturn(7)
FibReturn(2)
LogGrowthFunction <- function( n = 10 , k = 1000 , r = .05) {
for( f in seq(1 , k)) {
n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(n)
}
LogGrowthFunction()
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( f in seq(1 , k)) {
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(n)
}
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( f in seq(2 , k)) {
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(n)
}
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
LogisticGrowth <- n
for( f in seq(2 , k)) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
n <- LogisticGrowth
}
return(n)
}
LogGrowthFunction()
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( f in seq( 2 , k ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(LogisticGrowth)
}
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( f in seq( 2 , k ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(LogisticGrowth)
}
n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( f in seq( 2 , k ) ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(LogisticGrowth)
}
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(LogisticGrowth)
}
LogGrowthFunction()
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
return(LogisticGrowth)
}
LogGrowthFunction()
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
return(LogisticGrowth)
}
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
return(n)
}
LogGrowthFunction()
plot(n)
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
plot(n)
return(n)
}
LogGrowthFunction()
LogGrowthFunction( n = 20, k = 1000, r = .0005)
LogGrowthFunction( n = 20, k = 1000, r = .005)
LogGrowthFunction( n = 20, k = 100, r = .005)
LogGrowthFunction( n = 2, k = 100, r = .005)
LogGrowthFunction( n = 2, k = 10000, r = .005)
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
plot(n, xlab = "Generations", ylab = "Abundance")
return(n)
}
LogGrowthFunction()
LogGrowthFunction()
LogGrowthFunction2 <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
plot(n, xlab = "Generations", ylab = "Abundance")
return(n)
}
LogGrowthFunction2()
LogGrowthFunction2( n = 10, Gens = 1000)
LogGrowthFunction(, , 20)
LogGrowthFunction(, , 999)
LogGrowthFunction(n,Gens, k = 20, r)
LogGrowthFunction(k = 20)
LogGrowthFunction(Gens = 100, k = 20)
LogGrowthFunction( Gens = 100, k = 20)
LogGrowthFunction( n = 10, Gens = 100, k = 20)
LogGrowthFunction( n = 10, Gens = 100, k = 20, r = .05)
LogGrowthFunction()
LogGrowthFunction(Gens = 20000)
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
plot(n, xlab = "Generations", ylab = "Abundance")
return(n)
}
LogGrowthFunction(Gens = 20000)
LogGrowthFunction(Gens = 20000, k = 90000)
LogGrowthFunction()
B <- matrix(
c(rep(1,20))
ncols = 4
nrows = 5
)
B <- matrix(
c( rep(1,20) ),
ncols <- 4,
nrows <- 5
)
B
SimpleMatrix <- matrix( c(0,1,1,1,0,0,1,0,0), ncols = 3, nrows = 3)
SimpleMatrix <- matrix( c(0,1,1,1,0,0,1,0,0), ncol = 3, nrow = 3)
SimpleMatrix
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialpredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.2    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.1    #conversion constant of prey into predators
Zero <- 0
time <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
#Writing the for loops
for ( t in seq( 2 , length(time) ) ) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
#Removing negative values from the data
if ( (n[t] < Zero ) ) {
n[t] <- Zero
}
if ( (p[t] < Zero)) {
p[t] <- Zero
}
}
print(n)
print(p)
plot(n, xlab = "Time", ylab = "Abundance" ) {
lines(p)
}
plot(n, xlab = "Time", ylab = "Abundance" )
lines(p)
plot(xlab = "Time", ylab = "Abundance" )
lines(n)
x <- 7     #assigning random numerical value to variable x for the
if ( x > 5) {
print("Is pretty big, yo.")
} else {
"Is not that big, man."
}
getwd()
x <- 3     #assigning random numerical value to variable x for the
if ( x > 5) {
print("Is pretty big, yo.")
} else {
"Is not that big, man."
}
if ( x > 5) {
print("Is pretty big, yo.")
} else {
"Is not that big, man."
}
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
plot(n, xlab = "Generations", ylab = "Abundance")
return(n)
}
LogGrowthFunction()
LogGrowthFunction(Gens = 200)
View(FibReturn)
View(LogGrowthFunction)
SqMatrix( nrow = nRows, ncol = nCols )
TransformMatrixPairwise <- function( SqMatrix ) {
#making it a data frame will be easier, each collumn as object
SqMatrix( nrow = nRows, ncol = nCols )
for (i in 1:nCols) {
for (j in 1:nRows) {
if (SqMatrix [i,j] != 0) {
print("here")
#value = value, in if statement
}
}
}
}
TransformMatrixPairwise(SimpleMatrix)
TransformMatrixPairwise( SqMatrix = SimpleMatrix)
SqMatrix( nrow = nRows, ncol = nCols )
TransformMatrixPairwise <- function( SqMatrix ) {
#making it a data frame will be easier, each collumn as object
SqMatrix( nrow = nRows, ncol = nCols )
for (i in 1:nCols) {
for (j in 1:nRows) {
if (SqMatrix [i,j] != 0) {
print("here")
#value = value, in if statement
}
}
}
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix)
dicks<- "hot"
mydick <- "superhot"
bigger <- mydick > dicks
if(bigger) {
telljohnny <- "my dick is bigger than most dicks"
} else {
telljohnny <- "my dick is smaller than most dicks"
}
print(telljohnny)
HowYouCanTell <- function() {
dicks<- "hot"
mydick <- "superhot"
bigger <- mydick > dicks
if(bigger) {
telljohnny <- "my dick is bigger than most dicks"
} else {
telljohnny <- "my dick is smaller than most dicks"
}
print(telljohnny)
}
HowYouCanTell(
)
HowYouCanTell(dicks)
HowYouCanTell <- function( mydick = 23, dicks = 7) {
bigger <- mydick > dicks
if(bigger) {
telljohnny <- "my dick is bigger than most dicks"
} else {
telljohnny <- "my dick is smaller than most dicks"
}
print(telljohnny)
}
HowYouCanTell()
HowYouCanTell(dick = 24)
vector = c( 'dick', 'dick', 'dick', 'dick', 'dick', 'dick', 'dick', 'not a dick',  'dick', 'dick', 'dick', 'also not a dick',  'dick', 'dick', 'dick',)
vector = c( "dick", "dick")
vector = c( "dick", "dick", "dick", "dick", "dick", "dick", "not a dick",  "dick", "dick", "dick", "also not a dick")
vector = c( "dick", "dick", "dick", "dick", "dick", "dick", "not a dick",  "dick", "dick", "dick", "also not a dick")
allnondickvalues = which( != "dick")
allnondickvalues = which( != "dick"(vector))
allnondickvalues = which( vector[!= "dick"])
allnondickvalues = which( != vector["dick"])
allnondickvalues = which( vector != "dick" )
vector[allnondickvalues] <- "dick"
print(vector
)
source('~/.active-rstudio-document', echo=TRUE)
paste( vector, "definitely a dick", "yeah,")
paste( vector, "definitely a dick", -)
paste( vector, "definitely a dick", "-")
paste( vector, "yeah,", "definitely a dick")
paste( vector, "yeah,", "definitely a dick", sep = "-")
paste( vector, "dick", sep = "=")
rep("dick", time=30)
rep("dick", time=60)
rep("dick", time=64)
rep("dick", time=65)
rep(0:100)
help("matrix")
q <- rep("dick", time=65)
matrix <- matrix( data = q, cnol = 3)
matrix <- matrix( data = q, ncol = 3)
matrix <- matrix( data = q, ncol = 5)
print(matrix)
q <- rep("dick", time=72)
matrix <- matrix( data = q, ncol = 6)
print(matrix)
print(matrix[6,9])
print(matrix[9,6])
matrix <- matrix( data = q, ncol = 9)
print(matrix[6,9])
colnames(PairwiseMatrix) <- c("Row", "Column", "Value")
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)         #defining all necesary variables and eliminating 'magic' numbers
nCols <- ncol(SqMatrix)
value <- 1
zero <- 0
m <- 0
PairwiseCols <- 3
CurrentPairwise <- 1
for (q in 1:nRows) {
for (f in 1:nCols) {
if (SqMatrix[q,f] != zero) {
m <- ( m + 1 )
} #creating a for loop to run through original matrix and find all
#nonzero elements in order to define the parameters of the new
#matrix (number of nonzero elements in first matrix = number of
#rows in pairwise matrix)
}
}
PairwiseMatrix <- matrix( ncol = PairwiseCols, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise , 1 ] <- j    #inputting row values into new matrix
PairwiseMatrix[ CurrentPairwise , 2 ] <- i    #inputting collumn values into new matrix
PairwiseMatrix[ CurrentPairwise , 3 ] <- value    #creating third collumn
CurrentPairwise <- ( CurrentPairwise + 1 )    #moving the inputs down the rows so as to
#avoid repeatedly overwriting the data
#in the first row
}
}
}
colnames(PairwiseMatrix) <- c("Row", "Column", "Value")
return(PairwiseMatrix)
}
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab07")
Matrix <- read.csv("LargeAdjacencyMatrix.csv")      #setting up a test matrix
TransformMatrixPairwise( SqMatrix = Matrix )    #using test matrix created above as input
View(Matrix)
Pairwisematrix <- TransformMatrixPairwise( SqMatrix = Matrix )    #using test matrix created above as input
View(Pairwisematrix)
for ( i in 1:10) {
print("hi")
}
allowance <- 5
gum <- (2*1.34)
piggybank <- 10
for ( j in seq(1,8)) {
moneytotal <- (piggybank + allowance - gum)
print(moneytotal)
piggybank <- moneytotal
}
initialpopulation <- 2000
rateofdecline <- .95
for ( y in seq(1,7)) {
populationdecline <- initialpopulation*rateofdecline
print(populationdecline)
initialpopulation <- populationdecline
}
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
rep(0, 18)
for ( l in seq(1,18) ) {
addingthrees <- rep(3 * (1:18))
}
print(addingthrees)
addingthreesagain <- rep(1,18)
for ( l in seq(1,18) ) {
addingthreesagain[l] <- (3 * l)
}
print(addingthreesagain)
makeitone <- rep(0,18)
makeitone[1] <- 1
print(makeitone)
for ( p in seq(2,18)) {
makeitone[p] <- (1 + (2 * makeitone[p-1]) )
}
print(makeitone)
Fibonacci <- rep(1,20)
for ( f in seq(3,20)) {
Fibonacci[f] <- (Fibonacci[f-1] + Fibonacci[f-2])
}
print(Fibonacci)
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
time <- seq(1,12)
abundance <- equation
plot(time, abundance, main = "Lab 04 Plot", xlab = "Time", ylab = "Abundance")
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab04")
read.csv(file = "CO2_data_cut_paste.csv")
matrix <- read.csv(file = "CO2_data_cut_paste.csv")
nCol <- ncol(matrix)
nRow <- nrow(matrix)
for ( q in 2:nCol ) {
for ( m in 2:nRow ) {
matrix[ m, q ] <- (matrix[m,q]/matrix[m-1,q])
}
}
print(matrix)
