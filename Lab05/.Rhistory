initialprey <- 100      #initial prey abundance
initialPredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( 0 , 1000 )
nvalues <- rep( 0 , 1000 )
pvalues <- rep( 0 , 1000 )
n <- initialprey
p <- initialpredator
for ( t in seq( 2 , 1000 ) ) {
nvalues[t] <- n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
pvalues <- p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(nvalues)
for ( t in seq( 2 , 1000 ) ) {
nvalues[t] <- n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
}
print(nvalues)
for ( t in seq( 2 , 1000 ) ) {
nvalues[t] <- n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
pvalues[t] <- p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(nvalues)
print(pvalues)
for ( t in seq( 2 , 1000 ) ) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(nvalues)
for ( t in seq( 2 , 1000 ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(nvalues)
for ( t in seq( 2 , 1000 ) ) {
initialprey[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- initialprey
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(n)
print(initialprey)
n <- initialprey
p <- initialpredator
for ( t in seq( 2 , 1000 ) ) {
initialprey[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- initialprey
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(initialprey)
inititialprey <- n
for ( t in seq( 2 , 1000 ) ) {
initialprey[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- initialprey
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(initialprey)
for ( t in seq( 2 , length(totalgenerations) ) ) {
initialprey[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- initialprey
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
time <- rep( Zero , totalgenerations )
nvalues <- rep( Zero , totalgenerations )
pvalues <- rep( Zero , totalgenerations )
for ( t in seq( 2 , length(time) ) ) {
initialprey[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- initialprey
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(initialprey)
str(nvalues)
n <- initialprey
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(nvalues)
pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(pvalues)
pvalues <- rep( Zero , totalgenerations )
p <- initialpredator
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(pvalues)
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( Zero , totalgenerations )
nvalues <- rep( Zero , totalgenerations )
pvalues <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues
}
print(pvalues)
print(nvalues)
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(nvalues)
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( Zero , totalgenerations )
nvalues <- rep( Zero , totalgenerations )
pvalues <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(nvalues)
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
nvalues <- rep( Zero , totalgenerations )
n <- initialprey
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(nvalues)
for ( t in seq( 2 , length(nvalues) ) ) {
meh[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- meh
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(meh)
for ( t in seq( 2 , length(nvalues) ) ) {
equation[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- equation
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
equation <- initialprey
for ( t in seq( 2 , length(nvalues) ) ) {
equation[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- equation
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(equation)
GasYearOne <- which( ( CO2data[ ,"Gas" ]!= Zero ) )
CO2data[ GasYearOne[1], "Year" ]
lowerlimit2 <- 200
upperlimit2 <- 300
subsetindices2 <- which( ( CO2data[ ,"Total" ] > lowerlimit2 &
( CO2data [ ,"Total" ] < upperlimit2 ) ) )
subset2 <- CO2data[ subsetindices2 , "Year" ]
print( subset2 )
n
n <- initialprey
n
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n
nvalues
p
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
qqq <- n
for ( t in seq( 2 , length(nvalues) ) ) {
qqq[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- qqq
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
qqq
qqq <- n
n <- initialprey
p <- initialpredator
qqq <- n
qqq
n
for ( t in seq( 2 , length(nvalues) ) ) {
qqq[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
qqq
print( subset2 )
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(nvalues)
nvalues <- n
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(nvalues)
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( Zero , totalgenerations )
nvalues <- rep( Zero , totalgenerations )
pvalues <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
nvalues <- n
#Writing the for loops
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(pvalues)
print(nvalues)
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( Zero , totalgenerations )
nvalues <- rep( Zero , totalgenerations )
pvalues <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
nvalues <- n
for ( t in seq( 2 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
for ( t in seq( 3 , length(nvalues) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(nvalues)
length(nvalues)
nvalues <- n
for ( t in seq( 3 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(nvalues)
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(nvalues)
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
"pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
p <- pvalues"
}
print(nvalues)
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
}
print(nvalues)
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
nvalues <- n
#Writing the for loops
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
}
print(nvalues)
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
nvalues <- n
nvalues
for ( t in seq( 1 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
}
print(nvalues)
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- ( n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1]) )
n <- nvalues
}
print(nvalues)
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
nvalues <- n
#Writing the for loops
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
}
print(nvalues)
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n+1 #n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
}
warnings()
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t]+1 #n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
}
print(nvalues)
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1]+1 #n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n <- nvalues
}
print(nvalues)
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
nvalues <- n
pvalues <- p
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
pvalues[t] <- p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
n <- nvalues
p <- pvalues
}
print(nvalues)
print(pvalues)
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
n <- nvalues
p <- pvalues
}
print(nvalues)
print(pvalues)
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialPredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
nvalues <- n
pvalues <- p
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
n <- nvalues
p <- pvalues
}
print(nvalues)
print(pvalues)
print(nvalues)
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialpredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.02    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.01    #conversion constant of prey into predators
time <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
nvalues <- n
pvalues <- p
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
n <- nvalues
p <- pvalues
}
print(nvalues)
print(pvalues)
plot(nvalues)
plot(pvalues)
pvalues
for ( t in seq( 2 , length(time) ) ) {
nvalues[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
pvalues[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
n <- nvalues
p <- pvalues
}
print(pvalues)
print(nvalues)
plot(nvalues, pvalues)
help(plot)
plot(pvalues)
line(nvalues)
lines(nvalues)
plot(nvalues)
lines(pvalues)
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab05")
read.csv("Vector1.csv")     #Impoting the vector
Vector1 <- read.csv("Vector1.csv")     #assigning the imported vector to a variable
Vector1 <- as.vector(Vector1$x)     #Making the data set a readable vector
for ( i in seq(1:length(Vector1))) {
if ( (Vector1[i] < 0 )) {
Vector1[i] <- NA    #replacing the ith element of the vector
}
}
Vector1
Vector1[995]
Zero <- 0
Vector1 <- as.vector(Vector1$x)     #Making the data set a readable vector
for ( i in seq(1:length(Vector1))) {
if ( is.na(Vector1[i] )) {
Vector1[i] <- Zero    #replacing the ith element of the vector
}
}
Vector1[995]
read.csv("Vector1.csv")     #Impoting the vector
Vector1 <- read.csv("Vector1.csv")     #assigning the imported vector to a variable
Vector1[995]
Vector1 <- as.vector(Vector1$x)     #Making the data set a readable vector
Vector1[995]
