r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
Zero <- 0
Vector1 <- as.vector(Vector1$x)     #Making the data set a readable vector
for ( i in seq(1,length(Vector1))) {
if ( is.na(Vector1[i] )) {
Vector1[i] <- Zero    #replacing the ith element of the vector
}
}
Vector1[995]
initialpopulation <- 2000
rateofdecline <- .95
for ( y in seq(1,7)) {
populationdecline <- initialpopulation*rateofdecline
print(populationdecline)
initialpopulation <- populationdecline
}
PairwiseMatrix <- SqMatrix[j,i,1]
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix <- SqMatrix[j,i,1]
}
}
}
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix <- SqMatrix[ j, i ]
}
}
}
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix <- SqMatrix[ j, i ]
return(PairwiseMatrix)
}
}
}
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix <- SqMatrix[ 3, 2 ]
return(PairwiseMatrix)
}
}
}
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ 1, 1 ] <- SqMatrix[ j, i ]
PairwiseMatrix[ 1, 2 ] <- j
return(PairwiseMatrix)
}
}
}
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ 1, 1 ] <- SqMatrix[ j, i ]
PairwiseMatrix[ 1, 2 ] <- j
PairwiseMatrix[, i ] <- i
return(PairwiseMatrix)
}
}
}
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ j, ] <- j
PairwiseMatrix[, i ] <- i
return(PairwiseMatrix)
}
}
}
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ j, ] <- j
PairwiseMatrix[, i ] <- i
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ j, ] <- j
PairwiseMatrix[, i ] <- i
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
m <- 1
value <- 1
zero <- 0
startcol <- 3
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise, 1 ] <- j
PairwiseMatrix[ CurrentPairwise , 2 ] <- i
PairwiseMatrix[ CurrentPairwise, 3] <- Value
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
m <- 1
value <- 1
zero <- 0
startcol <- 3
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = startcol, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise, 1 ] <- j
PairwiseMatrix[ CurrentPairwise , 2 ] <- i
PairwiseMatrix[ CurrentPairwise, 3] <- value
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
value <- 1
zero <- 0
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = nCols, nrow = nRows)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise , 1 ] <- j
PairwiseMatrix[ CurrentPairwise , 2 ] <- i
PairwiseMatrix[ CurrentPairwise , 3 ] <- value
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
value <- 1
zero <- 0
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = nCols, nrow = nRows)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise , 1 ] <- j
PairwiseMatrix[ CurrentPairwise , 2 ] <- i
PairwiseMatrix[ CurrentPairwise , 3 ] <- value
CurrentPairwise <- (CurrentPairwise + 1)
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
value <- 1
zero <- 0
CurrentPairwise <- 1
PairwiseMatrix <- matrix( ncol = nCols, nrow = 9)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise , 1 ] <- j
PairwiseMatrix[ CurrentPairwise , 2 ] <- i
PairwiseMatrix[ CurrentPairwise , 3 ] <- value
CurrentPairwise <- ( CurrentPairwise + 1 )
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
source('~/.active-rstudio-document', echo=TRUE)
SimpleMatrix <- matrix( c(0,1,1,1,0,0,1,0,0), ncol = 3, nrow = 3)
TransformMatrixPairwise <- function( SqMatrix ) {
nCols <- ncol(SqMatrix)
value <- 1
zero <- 0
CurrentPairwise <- 1
for (q in 1:nRows) {
for (f in 1:nCols) {
if (SqMatrix[j,i] != zero) {
m <- ( m + 1 )
}
}
}
nRows <- m
PairwiseMatrix <- matrix( ncol = nCols, nrow = nRows)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise , 1 ] <- j
PairwiseMatrix[ CurrentPairwise , 2 ] <- i
PairwiseMatrix[ CurrentPairwise , 3 ] <- value
CurrentPairwise <- ( CurrentPairwise + 1 )
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
value <- 1
zero <- 0
m <- 0
CurrentPairwise <- 1
for (q in 1:nRows) {
for (f in 1:nCols) {
if (SqMatrix[j,i] != zero) {
m <- ( m + 1 )
}
}
}
nRows <- m
PairwiseMatrix <- matrix( ncol = nCols, nrow = nRows)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise , 1 ] <- j
PairwiseMatrix[ CurrentPairwise , 2 ] <- i
PairwiseMatrix[ CurrentPairwise , 3 ] <- value
CurrentPairwise <- ( CurrentPairwise + 1 )
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
source('~/.active-rstudio-document', echo=TRUE)
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
value <- 1
zero <- 0
m <- 0
CurrentPairwise <- 1
for (q in 1:nRows) {
for (f in 1:nCols) {
if (SqMatrix[j,i] != zero) {
m <- ( m + 1 )
}
}
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
PairwiseMatrix <- matrix( ncol = nCols, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise , 1 ] <- j
PairwiseMatrix[ CurrentPairwise , 2 ] <- i
PairwiseMatrix[ CurrentPairwise , 3 ] <- value
CurrentPairwise <- ( CurrentPairwise + 1 )
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix )
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getwd()
setwd(/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab07)
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab07")
read.csv(LargeAdjacencyMatrix.csv)
read.csv("LargeAdjacencyMatrix.csv")
Matrix <- read.csv("LargeAdjacencyMatrix.csv")
TransformMatrixPairwise( SqMatrix = Matrix )
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
SimpleMatrix <- matrix( c(0,1,1,1,0,0,1,0,0), ncol = 3, nrow = 3)
getwd()
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab07")
Matrix <- read.csv("LargeAdjacencyMatrix.csv")
TransformMatrixPairwise <- function( SqMatrix ) {
nRows <- nrow(SqMatrix)
nCols <- ncol(SqMatrix)
value <- 1
zero <- 0
m <- 0
PairwiseCols <- 3
CurrentPairwise <- 1
for (q in 1:nRows) {
for (f in 1:nCols) {
if (SqMatrix[q,f] != zero) {
m <- ( m + 1 )
}
}
}
PairwiseMatrix <- matrix( ncol = PairwiseCols, nrow = m)
for (j in 1:nRows) {
for (i in 1:nCols) {
if (SqMatrix[j,i] != zero) {
PairwiseMatrix[ CurrentPairwise , 1 ] <- j
PairwiseMatrix[ CurrentPairwise , 2 ] <- i
PairwiseMatrix[ CurrentPairwise , 3 ] <- value
CurrentPairwise <- ( CurrentPairwise + 1 )
}
}
}
return(PairwiseMatrix)
}
TransformMatrixPairwise( SqMatrix = Matrix )
FibReturn <- function( n = 3 ) {
Fibonacci <- rep( 1 , n )
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
FibReturn(34)
FibReturn(34)
FibReturn(2)
FibReturn <- function( n = 3 ) {
Fibonacci <- rep( 1 , n )
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn()
FibReturn <- function( n = 3 ) {
Fibonacci <- rep( 1 , n )
if( n < 3) {}
return(Fibonacci <- 1)
}
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn <- function( n = 3 ) {
Fibonacci <- rep( 1 , n )
if( n < 3) {
return(Fibonacci <- 1)
}
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn()
FibReturn(2)
FibReturn(2)
FibReturn <- function( n = 3 ) {
Fibonacci <- rep( 1 , n )
if( n < 3) {
Fibonacci <- 1
return(Fibonacci)
}
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn(2)
FibReturn(5)
FibReturn(17)
FibReturn <- function( n = 3 ) {
Fibonacci <- rep( 1 , n )
if( n < 3) {
for( dicks in 0:n)
Fibonacci[dicks] <- 1
return(Fibonacci)
}
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn(2)
FibReturn(2)
FibReturn(10)
FibReturn(1)
FibReturn <- function( n = 3 ) {
Fibonacci <- rep( 1 , n )
if( n < 0)
return( "bro dats a negative")
if( n < 3) {      #Bonus 1
for( d in 0:n)
Fibonacci[d] <- 1
return(Fibonacci)
}
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn(-1)
FibReturn <- function( n = 3 ) {
if( n < 0)
return( "bro dats a negative")
Fibonacci <- rep( 1 , n )
if( n < 3) {      #Bonus 1
for( d in 0:n)
Fibonacci[d] <- 1
return(Fibonacci)
}
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn(-1)
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )    #defining the function, variables of which
#have been defined in function arguments
}
plot(n, main = "Discrete-time Logistic Growth", xlab = "Generations", ylab = "Abundance")
#plotting the function with appropriate
#axis labels
return(n)
}
LogGrowthFunction(Gens = 200)
TransformMatrixPairwise( SqMatrix = Matrix )    #using test matrix created above as input
