r <- 0.8
n <- 2500
for ( t in seq(1,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
k <- 10000
r <- 0.8
n <- 2500
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
n[1] <- 2500
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
for ( t in seq(2,12)) {
n <- equation
}
print(n)
print(n)
k <- 10000
r <- 0.8
n <- 2500
for ( t in seq(2,12)) {
n <- equation
}
print(n)
print(n[3])
print(n[1])
n <- 2500
print(n[1])
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
print(n)
print(equation)
n <- equation
print(equation)
k <- 10000
r <- 0.8
n <- 2500
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(n)
print(equation)
k <- 10000
r <- 0.8
n <- 2500
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n[t] <- equation[t]
}
print(equation)
k <- 10000
r <- 0.8
n <- 2500
equation <- n
for ( t in seq(2,12)) {
equation[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
n <- equation
}
print(equation)
help(setwd)
setwd(dir = rekna/Documents/Comp\Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(rekna/Documents/Comp\Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(rekna/Documents/Comp Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(rekna/Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(Users/rekna/Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
getwd
getwd
getwd()
setwd(/Users/rekna/Documents/Comp_Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(/Users/rekna/Documents/Comp Bio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
getwd()
setwd(~/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(~/Usersrekna/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
setwd(~/Documents/CompBio/CompBioGithub/CompBioLabsandHomework/Lab04)
FibReturn <- function( n >= 3 ) {
Fibonacci <- rep( 1 , n )
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[]f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn <- function( n = 3 ) {
Fibonacci <- rep( 1 , n )
for ( f in seq( 3 , length(Fibonacci)) ) {
Fibonacci[f] <- Fibonacci[f-1] + Fibonacci[f-2]
}
return(Fibonacci)
}
FibReturn()
FibReturn(7)
FibReturn(2)
LogGrowthFunction <- function( n = 10 , k = 1000 , r = .05) {
for( f in seq(1 , k)) {
n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(n)
}
LogGrowthFunction()
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( f in seq(1 , k)) {
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(n)
}
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( f in seq(2 , k)) {
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(n)
}
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
LogisticGrowth <- n
for( f in seq(2 , k)) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
n <- LogisticGrowth
}
return(n)
}
LogGrowthFunction()
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( f in seq( 2 , k ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(LogisticGrowth)
}
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( f in seq( 2 , k ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(LogisticGrowth)
}
n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( f in seq( 2 , k ) ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(LogisticGrowth)
}
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
return(LogisticGrowth)
}
LogGrowthFunction()
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
return(LogisticGrowth)
}
LogGrowthFunction()
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
LogisticGrowth[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
return(LogisticGrowth)
}
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
return(n)
}
LogGrowthFunction()
plot(n)
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
plot(n)
return(n)
}
LogGrowthFunction()
LogGrowthFunction( n = 20, k = 1000, r = .0005)
LogGrowthFunction( n = 20, k = 1000, r = .005)
LogGrowthFunction( n = 20, k = 100, r = .005)
LogGrowthFunction( n = 2, k = 100, r = .005)
LogGrowthFunction( n = 2, k = 10000, r = .005)
LogGrowthFunction <- function( n = 10, k = 1000 , r = .05) {
for( t in seq( 2 , k ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
plot(n, xlab = "Generations", ylab = "Abundance")
return(n)
}
LogGrowthFunction()
LogGrowthFunction()
LogGrowthFunction2 <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
plot(n, xlab = "Generations", ylab = "Abundance")
return(n)
}
LogGrowthFunction2()
LogGrowthFunction2( n = 10, Gens = 1000)
LogGrowthFunction(, , 20)
LogGrowthFunction(, , 999)
LogGrowthFunction(n,Gens, k = 20, r)
LogGrowthFunction(k = 20)
LogGrowthFunction(Gens = 100, k = 20)
LogGrowthFunction( Gens = 100, k = 20)
LogGrowthFunction( n = 10, Gens = 100, k = 20)
LogGrowthFunction( n = 10, Gens = 100, k = 20, r = .05)
LogGrowthFunction()
LogGrowthFunction(Gens = 20000)
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
plot(n, xlab = "Generations", ylab = "Abundance")
return(n)
}
LogGrowthFunction(Gens = 20000)
LogGrowthFunction(Gens = 20000, k = 90000)
LogGrowthFunction()
B <- matrix(
c(rep(1,20))
ncols = 4
nrows = 5
)
B <- matrix(
c( rep(1,20) ),
ncols <- 4,
nrows <- 5
)
B
SimpleMatrix <- matrix( c(0,1,1,1,0,0,1,0,0), ncols = 3, nrows = 3)
SimpleMatrix <- matrix( c(0,1,1,1,0,0,1,0,0), ncol = 3, nrow = 3)
SimpleMatrix
totalgenerations <- 1000
initialprey <- 100      #initial prey abundance
initialpredator <- 10     #initial predator abundance
a <- 0.01    #attack rate
r <- 0.2    #growth rate of prey
m <- 0.05    #mortaility rate of predators
k <- 0.1    #conversion constant of prey into predators
Zero <- 0
time <- rep( Zero , totalgenerations )
n <- initialprey
p <- initialpredator
#Writing the for loops
for ( t in seq( 2 , length(time) ) ) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
#Removing negative values from the data
if ( (n[t] < Zero ) ) {
n[t] <- Zero
}
if ( (p[t] < Zero)) {
p[t] <- Zero
}
}
print(n)
print(p)
plot(n, xlab = "Time", ylab = "Abundance" ) {
lines(p)
}
plot(n, xlab = "Time", ylab = "Abundance" )
lines(p)
plot(xlab = "Time", ylab = "Abundance" )
lines(n)
x <- 7     #assigning random numerical value to variable x for the
if ( x > 5) {
print("Is pretty big, yo.")
} else {
"Is not that big, man."
}
getwd()
x <- 3     #assigning random numerical value to variable x for the
if ( x > 5) {
print("Is pretty big, yo.")
} else {
"Is not that big, man."
}
if ( x > 5) {
print("Is pretty big, yo.")
} else {
"Is not that big, man."
}
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )
}
plot(n, xlab = "Generations", ylab = "Abundance")
return(n)
}
LogGrowthFunction()
LogGrowthFunction(Gens = 200)
View(FibReturn)
View(LogGrowthFunction)
SqMatrix( nrow = nRows, ncol = nCols )
TransformMatrixPairwise <- function( SqMatrix ) {
#making it a data frame will be easier, each collumn as object
SqMatrix( nrow = nRows, ncol = nCols )
for (i in 1:nCols) {
for (j in 1:nRows) {
if (SqMatrix [i,j] != 0) {
print("here")
#value = value, in if statement
}
}
}
}
TransformMatrixPairwise(SimpleMatrix)
TransformMatrixPairwise( SqMatrix = SimpleMatrix)
SqMatrix( nrow = nRows, ncol = nCols )
TransformMatrixPairwise <- function( SqMatrix ) {
#making it a data frame will be easier, each collumn as object
SqMatrix( nrow = nRows, ncol = nCols )
for (i in 1:nCols) {
for (j in 1:nRows) {
if (SqMatrix [i,j] != 0) {
print("here")
#value = value, in if statement
}
}
}
}
TransformMatrixPairwise( SqMatrix = SimpleMatrix)
dicks<- "hot"
mydick <- "superhot"
bigger <- mydick > dicks
if(bigger) {
telljohnny <- "my dick is bigger than most dicks"
} else {
telljohnny <- "my dick is smaller than most dicks"
}
print(telljohnny)
HowYouCanTell <- function() {
dicks<- "hot"
mydick <- "superhot"
bigger <- mydick > dicks
if(bigger) {
telljohnny <- "my dick is bigger than most dicks"
} else {
telljohnny <- "my dick is smaller than most dicks"
}
print(telljohnny)
}
HowYouCanTell(
)
HowYouCanTell(dicks)
HowYouCanTell <- function( mydick = 23, dicks = 7) {
bigger <- mydick > dicks
if(bigger) {
telljohnny <- "my dick is bigger than most dicks"
} else {
telljohnny <- "my dick is smaller than most dicks"
}
print(telljohnny)
}
HowYouCanTell()
HowYouCanTell(dick = 24)
vector = c( 'dick', 'dick', 'dick', 'dick', 'dick', 'dick', 'dick', 'not a dick',  'dick', 'dick', 'dick', 'also not a dick',  'dick', 'dick', 'dick',)
vector = c( "dick", "dick")
vector = c( "dick", "dick", "dick", "dick", "dick", "dick", "not a dick",  "dick", "dick", "dick", "also not a dick")
vector = c( "dick", "dick", "dick", "dick", "dick", "dick", "not a dick",  "dick", "dick", "dick", "also not a dick")
allnondickvalues = which( != "dick")
allnondickvalues = which( != "dick"(vector))
allnondickvalues = which( vector[!= "dick"])
allnondickvalues = which( != vector["dick"])
allnondickvalues = which( vector != "dick" )
vector[allnondickvalues] <- "dick"
print(vector
)
source('~/.active-rstudio-document', echo=TRUE)
paste( vector, "definitely a dick", "yeah,")
paste( vector, "definitely a dick", -)
paste( vector, "definitely a dick", "-")
paste( vector, "yeah,", "definitely a dick")
paste( vector, "yeah,", "definitely a dick", sep = "-")
paste( vector, "dick", sep = "=")
rep("dick", time=30)
rep("dick", time=60)
rep("dick", time=64)
rep("dick", time=65)
rep(0:100)
help("matrix")
q <- rep("dick", time=65)
matrix <- matrix( data = q, cnol = 3)
matrix <- matrix( data = q, ncol = 3)
matrix <- matrix( data = q, ncol = 5)
print(matrix)
q <- rep("dick", time=72)
matrix <- matrix( data = q, ncol = 6)
print(matrix)
print(matrix[6,9])
print(matrix[9,6])
matrix <- matrix( data = q, ncol = 9)
print(matrix[6,9])
LogGrowthFunction(Gens = 200)
help("data.frame")
DataStore <- data.frame(n)
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )    #defining the function, variables of which
#have been defined in function arguments
}
plot(n, main = "Discrete-time Logistic Growth", xlab = "Generations", ylab = "Abundance")
#plotting the function with appropriate
#axis labels
DataStore <- data.frame(n)
return(n)
}
LogGrowthFunction(Gens = 200)
help("data.frame")
return(DataStore)
DataStore <- data.frame(n)
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )    #defining the function, variables of which
#have been defined in function arguments
}
plot(n, main = "Discrete-time Logistic Growth", xlab = "Generations", ylab = "Abundance")
#plotting the function with appropriate
#axis labels
DataStore <- data.frame(n)
return(DataStore)
return(n)
}
LogGrowthFunction()
help("data.frame")
source('~/.active-rstudio-document', echo=TRUE)
help("data.frame")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
LogGrowthFunction(Gens = 200)
help(write.csv)
setwd("/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab08")
source('~/Downloads/Lab08.R', echo=TRUE)
source('~/Downloads/Lab08.R', echo=TRUE)
LogGrowthFunction()
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )    #defining the function, variables of which
#have been defined in function arguments
}
plot(n, main = "Discrete-time Logistic Growth", xlab = "Generations", ylab = "Abundance")
#plotting the function with appropriate
#axis labels
DataStore <- data.frame(1:length(n), n)
colnames(DataStore) <- c("Generation" , "Abundance")
return(DataStore)
return(n)
write.csv( x = DataStore, file = "LogisticGrowthFunctionData.csv")
}
LogGrowthFunction()
write.csv( x = DataStore, file = "/Users/rekna/Documents/CompBio/CompBioGithub/CompBioLabsAndHomework/Lab08/LogisticGrowthFunctionData.csv")
LogGrowthFunction()
source('~/Downloads/Lab08.R', echo=TRUE)
LogGrowthFunction <- function( n = 10, Gens = 20, k = 1000 , r = .05) {
for( t in seq( 2 , Gens ) ) {
n[t] <- n[t-1] + ( r * n[t-1] * (k - n[t-1])/k )    #defining the function, variables of which
#have been defined in function arguments
}
plot(n, main = "Discrete-time Logistic Growth", xlab = "Generations", ylab = "Abundance")
#plotting the function with appropriate
#axis labels
DataStore <- data.frame(1:length(n), n)
colnames(DataStore) <- c("Generation" , "Abundance")
return(DataStore)
return(n)
write.csv(DataStore, file = "LogisticGrowthFunctionData.csv", row.name = T)
}
LogGrowthFunction()
getwd()
